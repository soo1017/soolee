title: "Javascript Learning"
url: "https://soo1017.github.io/soolee/javascript/js/execution_context"
subtitle: "Life flourishes with programming language learning"
banner: "https://soo1017.github.io/soolee/assets/img/learnings/javascript/header.png"
content_title: "Execution Context"
details:
    - title: "Definition"
      subsections:
          - text: |
              Execution context (EC), which is a wrapper, is defined as the environment in which the JavaScript code is executed. By environment, I mean the value of this, variables, objects, and functions JavaScript code has access to at a particular time (from medium.com).
    - title: "Description"
      subsections:
          - text: |
              Before describing about execution context and how it works, there are some concepts to describe in order to help your understanding.<br>
              <br>
              Execution context in JavaScript is of three types as:<br>
              <br>
              <strong>* Global execution context (GEC)</strong>: This is the default execution context in which JS code start its execution when the file first loads in the browser. All of the global code i.e. code which is not inside any function or object is executed inside the global execution context. GEC cannot be more than one because only one global environment is possible for JS code execution as the JS engine is single threaded.<br>
              <br>
              <strong>* Functional execution context (FEC)</strong>: Functional execution context is defined as the context created by the JS engine whenever it finds any function call. Each function has its own execution context. It can be more than one. Functional execution context has access to all the code of the global execution context though vice versa is not applicable. While executing the global execution context code, if JS engine finds a function call, it creates a new functional execution context for that function. In the browser context, if the code is executing in strict mode value of this is undefined else it is window object in the function execution context.<br>
              <br>
              <strong>* Eval</strong>: Execution context inside eval function.<br>
              <br>

              Execution context has two phases of it as:<br>
              <br>
              <strong>* Creation phase</strong>: Execution context is created with saving memory space for variables and functions.<br>
              <br>
              <strong>* Execution phase</strong>: Execution context runs its code with its settings for variables and functions in the its creation phase.<br>
              <br>

              Another important concept for execution context is execution context stack:<br>
              <br>
              <strong>* Execution context stack (ECS)</strong>: Execution context stack is a stack data structure, i.e. last in first out data structure, to store all the execution stacks created during the life cycle of the script. Global execution context is present by default in execution context stack and it is at the bottom of the stack. While executing the global execution context code, if JS engines find a function call, it creates a functional execution context for that function and pushes it on top of the execution context stack. JS engine executes the function whose execution context is at the top of the execution context stack. Once all the code of the function is executed, JS engines pop out that function’s execution context and start’s executing the function which is below it.<br>
              <br>
              Let me explain how execution context works with a simple JS example code below:
            codes: 
                - url: "https://gist.github.com/soo1017/7e041f7edc8ca9022ae8eeaf69d50a85.js"
                  caption: Execution Context Code
          - text: |
              The picture below shows a execution context stack (ECS) based on the JS code above. When the JS engine runs the code above, it creates a global execution context (GEC) and insert it into execution context stack (ECS). In the creation phase of GEC, memory spaces are saved for the variable 'a' and the fucntion 'b()'.<br>
              The JS engine handles diffrently between variable and fucntion when saving them. A memory space is reserved for variable only without assigning its value in the memory space. So it is set as 'undefined'. But the code of function is saved in the memory reserved for the function. Note that a funtion is an object.
            images:
                - url: "https://soo1017.github.io/soolee/assets/img/learnings/javascript/execution_context/execution_context1.png"
                  caption: Execution Context Stack - A Created GEC in ECS
                  setname: screens
          - text: |
              After the creation phase of GEC, the JS engine moves into the execution phase of GEC. It reads and excute one line at a time from the beginning of the code. When it hits the statement 'b()', it needs to calls the function 'b()', which means creating a FEC with saving some memory space for its variables and functions if any. The picture below depicts that the FEC of fucntion 'b()' is created and inserted into the ECS. The FEC does not save any memory for its variables and functions because there are no variables and functions. It has an outer environment because it is not GEC.<br>
              After the creation phase of FEC, the JS engine transits into the execution phase of FEC. It runs only statement 'console.log("Hi World")' in the function 'b()' and prints out 'Hi World'. 
            images:
                - url: "https://soo1017.github.io/soolee/assets/img/learnings/javascript/execution_context/execution_context2.png"
                  caption: Execution Context Stack - A Created FEC in ECS
                  setname: screens
          - text: |
              All operations are done with FEC now and ready to move out from ECS. The outer environment does not do anything because it does not have any scope search for the function 'b()'.
            images:
                - url: "https://soo1017.github.io/soolee/assets/img/learnings/javascript/execution_context/execution_context3.png"
                  caption: Execution Context Stack - A FEC ejected from ECS
                  setname: screens
          - text: |
              After the FEC is out from the ECS, the execution phase of GEC continues with the second statement 'console.log(a)'. The memory space for the variable 'a' is reserved, but there is not stored any value in it as mentioned early. Simply the variable 'a' is set as 'undefined'. So it will print out 'undefined' instead of 'Hello World!'. The JS engine moves into the expression 'var a = "Hello World!"' and executes the assignment expression. Now the memory space for the variable 'a' has the value 'Hello World!'. The picture shows that only GEC is left in the ECS.
            images:
                - url: "https://soo1017.github.io/soolee/assets/img/learnings/javascript/execution_context/execution_context4.png"
                  caption: Execution Context Stack - A GEC in ECS
                  setname: screens
          - text: |
              After hitting the function declaration statement, the JS engine is done with GEC. The GEC is ejected from ECS. Now ECS is empty. The JS engine completes the execution of the above code.
            images:
                - url: "https://soo1017.github.io/soolee/assets/img/learnings/javascript/execution_context/execution_context5.png"
                  caption: Execution Context Stack - A GEC Ejected from ECS
                  setname: screens
          - text: |
              You might notice one strange point in the execution of the above code from other languages behavior. The declarations of the function 'b()' and of variables 'a' are written after their execution statement or expression in the code. But it seems that there is no an issue of code execution. Even though the declarations are defined after the execution, the declarations work fine as if they are declared before their execution. This effect is called 'hoisting' in Javascript. The topic of 'hoisting' will be discussed in the next section.<br>
              <br>
              <br>
              Make a summary about how execution contexts works with the above code.
            codes: 
                - url: "https://gist.github.com/soo1017/7e041f7edc8ca9022ae8eeaf69d50a85.js"
                  caption: Execution Context Code
          - text: |
              The <strong>JS engine creates GEC</strong> in the ECS<br>
              The <strong>Creattion Phase of GEC</strong> (line by line) in the ECS<br>
              <br>
              <strong>1.</strong> 'b()': => ignore<br>
              <strong>2.</strong> 'console.log('a')': => ignore<br>
              <strong>3.</strong> 'var a = "Hello World!"': => set a memory space for the variable 'a' wihtout assigning 'Hello World!' in it. Set as 'undefined'.<br>
              <strong>4.</strong> 'function b() {...}': => set a memory space for the function 'b()' to save its name, codes, ...<br>
              <br>
              The <strong>Execution Phase of GEC</strong> (line by line) in the ECS<br>
              <br>
              <strong>5.</strong> 'b()': => calling the function 'b()' creates the execution context of the function 'b()' (FEC) in the ECS.<br>
              <br>
              The <strong>Creation Phase of FEC</strong> (line by line) in the ECS<br>
              <br>
              <strong>6.</strong> 'console.log("Hi World")': => ignore<br>
              <br>
              The <strong>Execution Phase of FEC</strong> (line by line) in the ECS<br>
              <br>
              <strong>7.</strong> 'console.log("Hi World")': => print out 'Hi World'<br>
              <br>
              <strong>FEC is poped out from ECS</strong> because its work is done. Back to <strong>the execution phase of GEC</strong> and continues<br>
              <br>
              <strong>8.</strong> 'console.log('a')': => print out the value in the memory space for the variable 'a'. Now the value is 'undefined'.<br>
              <strong>9.</strong> 'var a = "Hello World!"': => assigne "Hello World!" in the memory space of the variable 'a'. Now the value is 'Hello World!', not 'undefined" anymore.<br>
              <strong>10.</strong> 'function b() {...}': => ignore<br>
              <br>
              <strong>GEC is poped out from ECS</strong>. ECS is empty now.

    
