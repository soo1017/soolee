title: "Javascript Learning"
url: "http://localhost:4000/javascript/js/functional_programming"
subtitle: "Life flourishes with programming language learning"
banner: "http://localhost:4000/assets/img/learnings/javascript/header.png"
content_title: "Functional Programming"
details:
    - title: "Definition"
      subsections:
          - text: |
              Functional programming (often abbreviated FP) is the process of building software by composing pure functions, avoiding shared state, mutable data, and side-effects.
    - title: "Description"
      subsections: 
          - text: |
              Functional code tends to be more concise, more predictable, and easier to test than object oriented code.<br>
              The hardest part is wrapping your head around all the unfamiliar vocabulary. There are a lot of ideas in the innocent looking definition above which all need to be understood before you can begin to grasp the meaning of functional programming:<br>
              <br>
              - Pure functions<br>
              - Function composition<br>
              - Avoid shared state<br>
              - Avoid mutating state<br>
              - Avoid side effects<br>
              - try to separate immutable data from pure functions<br>
              <br>
              In other words, if you want to know what functional programming means in practice, you have to start with an understanding of those core concepts.<br>
              <br>
              <strong>A pure function</strong> is a function which:<br>
              <br>
              - Given the same inputs, always returns the same output, and<br>
              - Has no side-effects<br>
              <br>
              Pure functions have lots of properties that are important in functional programming, including referential transparency (you can replace a function call with its resulting value without changing the meaning of the program).<br>
              <br>
              <strong>Function composition</strong> is the process of combining two or more functions in order to produce a new function or perform some computation. For example, the composition f . g (the dot means “composed with”) is equivalent to f(g(x)) in JavaScript. Understanding function composition is an important step towards understanding how software is constructed using the functional programming.<br>
              <br>
              <strong>Shared state</strong> is any variable, object, or memory space that exists in a shared scope, or as the property of an object being passed between scopes. A shared scope can include global scope or closure scopes. Often, in object oriented programming, objects are shared between scopes by adding properties to other objects.<br>
              <br>
              Imagine you have a user object which needs saving. Your saveUser() function makes a request to an API on the server. While that’s happening, the user changes their profile picture with updateAvatar() and triggers another saveUser() request. On save, the server sends back a canonical user object that should replace whatever is in memory in order to sync up with changes that happen on the server or in response to other API calls.<br>
              <br>
              Unfortunately, the second response gets received before the first response, so when the first (now outdated) response gets returned, the new profile pic gets wiped out in memory and replaced with the old one. This is an example of a race condition — a very common bug associated with shared state.<br>
              <br>
              Another common problem associated with shared state is that changing the order in which functions are called can cause a cascade of failures because functions which act on shared state are timing dependent:<br>
            codes:
                - url: "https://gist.github.com/soo1017/982d4b9e9aef754d87ed00fd89c54762.js"
                  caption: Functional Programming 1 - Shared State
          - text: |
              When you avoid shared state, the timing and order of function calls don’t change the result of calling the function. With pure functions, given the same input, you’ll always get the same output. This makes function calls completely independent of other function calls, which can radically simplify changes and refactoring. A change in one function, or the timing of a function call won’t ripple out and break other parts of the program.<br>
            codes:
                - url: "https://gist.github.com/soo1017/087edef4ac416a898aa37150fc1bae18.js"
                  caption: Functional Programming 2 - Shared State
          - text: |
              In the example above, we use Object.assign() and pass in an empty object as the first parameter to copy the properties of x instead of mutating it in place. In this case, it would have been equivalent to simply create a new object from scratch, without Object.assign(), but this is a common pattern in JavaScript to create copies of existing state instead of using mutations, which we demonstrated in the first example.<br>
              <br>
              If you look closely at the console.log() statements in this example, you should notice something I’ve mentioned already: function composition. Recall from earlier, function composition looks like this: f(g(x)). In this case, we replace f() and g() with x1() and x2() for the composition: x1 . x2.<br>
              <br>
              Of course, if you change the order of the composition, the output will change. Order of operations still matters. f(g(x)) is not always equal to g(f(x)), but what doesn’t matter anymore is what happens to variables outside the function — and that’s a big deal. With impure functions, it’s impossible to fully understand what a function does unless you know the entire history of every variable that the function uses or affects.<br>
              Remove function call timing dependency, and you eliminate an entire class of potential bugs.<br>
              <br>
              An <strong>immutable object</strong> is an object that can’t be modified after it’s created. Conversely, a mutable object is any object which can be modified after it’s created.<br>
              <br>
              Immutability is a central concept of functional programming because without it, the data flow in your program is lossy. State history is abandoned, and strange bugs can creep into your software. For more on the significance of immutability, see “The Dao of Immutability.”<br>
              <br>
              In JavaScript, it’s important not to confuse const, with immutability. const creates a variable name binding which can’t be reassigned after creation. const does not create immutable objects. You can’t change the object that the binding refers to, but you can still change the properties of the object, which means that bindings created with const are mutable, not immutable.<br>
              <br>
              Immutable objects can’t be changed at all. You can make a value truly immutable by deep freezing the object. JavaScript has a method that freezes an object one-level deep:
            codes:
                - url: "https://gist.github.com/soo1017/a000e92f2b3c19ec35f1e15fdcc66ca8.js"
                  caption: Functional Programming 3 - Freeze
          - text: |
              But frozen objects are only superficially immutable. For example, the following object is mutable:<br>
              <br>
              Immutable objects can’t be changed at all. You can make a value truly immutable by deep freezing the object. JavaScript has a method that freezes an object one-level deep:
            codes:
                - url: "https://gist.github.com/soo1017/278b968261e02ed041885035c9a8403e.js"
                  caption: Functional Programming 3 - One-level Freeze
          - text: |
              As you can see, the top level primitive properties of a frozen object can’t change, but any property which is also an object (including arrays, etc…) can still be mutated — so even frozen objects are not immutable unless you walk the whole object tree and freeze every object property.<br>
              <br>
              In many functional programming languages, there are special immutable data structures called trie data structures (pronounced “tree”) which are effectively deep frozen — meaning that no property can change, regardless of the level of the property in the object hierarchy.<br>
              <br>
              Tries use structural sharing to share reference memory locations for all the parts of the object which are unchanged after an object has been copied by an operator, which uses less memory, and enables significant performance improvements for some kinds of operations.<br>
              <br>  
              For example, you can use identity comparisons at the root of an object tree for comparisons. If the identity is the same, you don’t have to walk the whole tree checking for differences.<br>
              <br>
              There are several libraries in JavaScript which take advantage of tries, including Immutable.js and Mori.<br>
              <br>
              I have experimented with both, and tend to use Immutable.js in large projects that require significant amounts of immutable state.<br>
              <br>
              A <strong>side effect</strong> is any application state change that is observable outside the called function other than its return value. Side effects include:<br>
              <br>
              - Modifying any external variable or object property (e.g., a global variable, or a variable in the parent function scope chain)<br>
              - Logging to the console<br>
              - Writing to the screen<br>
              - Writing to a file<br>
              - Writing to the network<br>
              - Triggering any external process<br>
              - Calling any other functions with side-effects<br>
              <br>
              Side effects are mostly avoided in functional programming, which makes the effects of a program much easier to understand, and much easier to test.<br>
              <br>
              Haskell and other functional languages frequently isolate and encapsulate side effects from pure functions using monads.<br>
              <br>
              What you do need to know right now is that side-effect actions need to be isolated from the rest of your software. If you keep your side effects separate from the rest of your program logic, your software will be much easier to extend, refactor, debug, test, and maintain.<br>
              <br>
              This is the reason that most front-end frameworks encourage users to manage state and component rendering in separate, loosely coupled modules.<br>
              <br>
              <strong>First-Class Fucntions</strong>: Functional programming tends to reuse a common set of functional utilities to process data. Object oriented programming tends to colocate methods and data in objects. Those colocated methods can only operate on the type of data they were designed to operate on, and often only the data contained in that specific object instance.<br>
              <br>
              In functional programming, any type of data is fair game. The same map() utility can map over objects, strings, numbers, or any other data type because it takes a function as an argument which appropriately handles the given data type. FP pulls off its generic utility trickery using higher order functions.<br>
              <br>
              JavaScript has first class functions, which allows us to treat functions as data — assign them to variables, pass them to other functions, return them from functions, etc…<br>
              <br>
              A higher order function is any function which takes a function as an argument, returns a function, or both. Higher order functions are often used to:<br>
              <br>
              - Abstract or isolate actions, effects, or async flow control using callback functions, promises, monads, etc…<br>
              - Create utilities which can act on a wide variety of data types<br>
              - Partially apply a function to its arguments or create a curried function for the purpose of reuse or function composition<br>
              - Take a list of functions and return some composition of those input functions<br>

            # codes:
            #     - url: "https://gist.github.com/soo1017/278b968261e02ed041885035c9a8403e.js"
            #       caption: Functional Programming 3 - One-level Freeze