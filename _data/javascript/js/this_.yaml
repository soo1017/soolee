title: "Javascript Learning"
url: "https://soo1017.github.io/soolee/javascript/js/this_"
subtitle: "Life flourishes with programming language learning"
banner: "https://soo1017.github.io/soolee/assets/img/learnings/javascript/header.png"
content_title: "'this'"
details:
    - title: "Definition"
      subsections:
          - text: |
              The JavaScript 'this' keyword refers to the object it belongs to. 'this' is a pseudo variable that may change from scope to scope dynamically.
            images:
                - url: "https://soo1017.github.io/soolee/assets/img/learnings/javascript/this_/this1.png"
                  caption: this keyword
                  setname: screens
    - title: "Description"
      subsections:
          - text: |
              When a function is called or invoked, function execution context is created and starts its creation phase where it makes variable environment for variables, 'this' object, and outer environment for scope chain. The image above shows it. This section mainly discusses about the object 'this', which is a very important concept to understand clearly because it is one of confusions in Javascript.<br>
              <br>
              It has different values depending on where it is used:<br>
              <br>
              1. Alone, this refers to the global object.<br>
              2. In a function, this refers to the global object.<br>
              3. In a function, in strict mode, this is undefined.<br>
              4. In a method of objects, this refers to the owner object.<br>
              5. In an event, this refers to the element that received the event.<br>
              6. Methods like call(), and apply() can refer this to any object.<br>
              <br>
              <br>
              <strong>***** Global Object *****</strong><br>
              <br>
              When used alone, the owner is the Global object, so this refers to the Global object. In a browser window the Global object is [object Window]:
            codes:
                - url: "https://gist.github.com/soo1017/a3f2134c8f6374c9226c66232c1d40b3.js"
                  caption: Global Object = 'this'
          - text: |
              In strict mode, when used alone, this also refers to the Global object [object Window]:
            codes:
                - url: "https://gist.github.com/soo1017/d36c0efb8741ba15abded389b7d7183a.js"
                  caption: Global Object = 'this' in Strict Mode
          - text: |
              In a JavaScript function, the owner of the function is the default binding for this. So, in a function, 'this' refers to the Global object [object Window] regardless of function statement or function expression.
            codes:
                - url: "https://gist.github.com/soo1017/75c5b29ddb8e57b8f1072e5ce3e6d614.js"
                  caption: Global Object = 'this' in Default Functions
          - text: |
              <br>
              <br>
              <strong>***** Undefined *****</strong><br>
              <br>
              JavaScript strict mode does not allow default binding. So, when used in a function, in strict mode, 'this' is undefined.
            codes:
                - url: "https://gist.github.com/soo1017/a1aec3fa8d4d6f939e52e8252c215cbf.js"
                  caption: undefined = 'this' in Functions with Strict Mode
          - text: |
              <br>
              <br>
              <strong>***** Owner Object *****</strong><br>
              <br>
              When the function is used as a method of a object, 'this' points to the owner object. The following code shows it with 3 diffrent codes.<br>
              <br>
              1. The first code shows that 'this' inside of method function of an object refers (points) to the object (parent).<br>
              <br>
              2. The second code shows that 'this' in a function inside the method function of an object refers (points) to the global object. It is weird and strange, but is designed that way. I would create confusion in handling 'this' object.<br>
              <br>
              3. The third code shows that assigning 'this' object into a variable, which is 'self' here and assigned by reference, can avoid any possible confusion with 'this' usage that is not consistent in 'this' refering. 
            codes:
                - url: "https://gist.github.com/soo1017/b814b49c192478a89967494fd1c3f1f5.js"
                  caption: Owner Object = 'this' with Function Method
          - text: |
              <br>
              <br>
              <strong>***** Event Handlers *****</strong><br>
              <br>
              In HTML event handlers, this refers to the HTML element that received the event:<br>
              The code shows that when clicking the button, the button will disappear because 'this' refers (points) to the DOM element (button here) that the 'click' event applies to.
            codes:
                - url: "https://gist.github.com/soo1017/bdd2396f6aebd75d7d3621482f776591.js"
                  caption: DOM Element = 'this' with Event Handlers
          - text: |
              <br>
              <br>
              <strong>***** Explicit Function Binding *****</strong><br>
              <br>
              The call() and apply() methods are predefined JavaScript methods. They can both be used to call <strong>an object function method</strong> with another object as argument(?). Attach call() and get an object as call()'s argument to a function method of an object to execute the function method with a new object.<br>
              It is like calling or applying one object to a function method of another object. It is why it is called call() or apply().<br>
              This pattern can be used when an object <strong>(A)</strong> needs to borrow a function method <strong>(M)</strong> of another object <strong>(B)</strong> because it is more convenient to borrow insetad of creating its own. The pattern will be <strong>'B.M(B's).call(A)'</strong>.
            codes:
                - url: "https://gist.github.com/soo1017/48e9f3afb43c7bcd370be2789dbf5d38.js"
                  caption: Explicit Function Binding
          - text: |
              <br>
              <br>
              <strong> With Bind() *****</strong><br>
              <br>
              Function.prototype.bind()<br>
              <br>
              The bind() method creates a new function that, when called, has its 'this' keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.
            codes:
                - url: "https://gist.github.com/soo1017/3f9d0b6134cfc80872face419f9def6e.js"
                  caption: With Bind()